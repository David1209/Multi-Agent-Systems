; --- Update beliefs ---
to update-beliefs ;- player funct
  let vis-rad view-team1
  let sound-rad sound-team1
  if (team = 2) [
    set vis-rad view-team2
    set sound-rad sound-team2
  ]
  
  let team-loc table:make
  let oppo-loc table:make
  let ball-loc table:get beliefs "ball-loc"
  let team-has-ball table:get beliefs "team-has-ball"
  let oppo-has-ball table:get beliefs "oppo-has-ball"
  ; hear
  foreach incoming_messages [
    let mess table:get ? "message"
    ifelse (table:get ? "subject" = "ballpos") [
      set ball-loc mess
    ][ ifelse (table:get ? "subject" = "ballown") [
      ifelse(item 0 table:get ? "from" = team) [
        set team-has-ball item 0 table:get ? "message"
        set oppo-has-ball item 1 table:get ? "message"
      ][ ;else
        set team-has-ball item 1 table:get ? "message"
        set oppo-has-ball item 0 table:get ? "message"
      ]
    ][ ifelse (item 0 table:get ? "from" = team) [
      ifelse ( (table:get ? "subject") = "teampos") [
        if (item 0 mess != who and not table:has-key? team-loc (item 0 mess) ) [
          table:put team-loc (item 0 mess) (item 1 mess)
        ]
      ][ if ( (table:get ? "subject") = "oppopos") [
        if (not table:has-key? oppo-loc (item 0 mess) ) [
          table:put oppo-loc (item 0 mess) (item 1 mess)
        ]
      ]]
    ][ ifelse ( (table:get ? "subject") = "oppopos") [
        if (item 0 mess != who and not table:has-key? team-loc (item 0 mess) ) [
          table:put team-loc (item 0 mess) (item 1 mess)
        ]
      ][ if ( (table:get ? "subject") = "teampos") [
        if (not table:has-key? oppo-loc (item 0 mess) ) [
          table:put oppo-loc (item 0 mess) (item 1 mess)
        ]
      ]]
    ]]]
  ]
  
  
  ; look
  ask players in-radius vis-rad [
    if (self != myself and not (table:has-key? team-loc who or table:has-key? oppo-loc who) ) [
      ifelse ([team] of self = [team] of myself) [
        table:put team-loc who list xcor ycor
      ][
        table:put oppo-loc who list xcor ycor
      ]
    ]
    
    if (table:get beliefs "has-ball") [
      ifelse ([team] of self = [team] of myself) [
        set team-has-ball true
        set oppo-has-ball false
      ][ ;else
        set team-has-ball false
        set oppo-has-ball true
      ]
    ]
  ]
  ask balls in-radius vis-rad [
    set ball-loc list xcor ycor
    ifelse (distancexy [xcor] of myself [ycor] of myself < 2) [
      table:put [beliefs] of myself "has-ball" true
      set team-has-ball true
    ][
      table:put [beliefs] of myself "has-ball" false
    ]
  ]
  
  table:put beliefs "ball-loc" ball-loc
  table:put beliefs "team-loc" team-loc
  table:put beliefs "oppo-loc" oppo-loc
  table:put beliefs "team-has-ball" team-has-ball
  table:put beliefs "oppo-has-ball" oppo-has-balL
end

; --- Update desires ---
to update-desires ;- player funct
  ifelse (table:get beliefs "team-has-ball") [
    set desire "score"
  ][ ifelse (table:get beliefs "oppo-has-ball") [
    set desire "prevent-score"
  ][
    set desire "find-ball"
  ]]
end

; --- Update intentions ---
to update-intentions ;- player funct
  let playstyle table:get beliefs "playstyle"
  let has-ball table:get beliefs "has-ball"
  let ball-loc table:get beliefs "ball-loc"
  let other-team 1
  if (team = 1) [
    set other-team 2
  ]
  
  ifelse (desire = "find-ball") [
    ifelse (am-i-closest item 0 ball-loc item 1 ball-loc) [
      set intention "move-to-ball"
    ][ ifelse (playstyle = "off") [
        set intention "move-forward"
    ][ ;else
        set intention "between-ball-and-goal"
    ]]
  ][ ifelse (desire = "score") [
    ifelse (playstyle = "off") [
      ; our team has the ball and we want to attack
      ifelse (has-ball) [
        ; move ball to goal, if we are close try to score
        ifelse (near-goal other-team) [
          set intention "try-score"
        ][ ;else
          set intention "move-forward-with-ball"
        ]
      ][ ;else 
        ifelse (near-goal other-team) [
          set intention "support-score"
        ][ ;else
          set intention "move-forward"
        ]
      ]
    ][ ifelse (playstyle = "def") [
      ; our team has the ball and we're keeping background
      ifelse (has-ball) [
        set intention "pass-attacker"
      ][ ifelse (on-own-half) [
          set intention "help-keeper"
      ][ ;else
          set intention "to-own-half"
      ]]
    ][ if (playstyle = "keep") [
      ; our team has the ball and i should be keeping
      ifelse (has-ball) [
        set intention "pass-attacker"
      ][ ifelse (near-goal team) [
        set intention "stay-at-own-goal"
      ][
        set intention "move-to-own-goal"
      ]]
    ]]]
  ][ if (desire = "prevent-score") [
    ifelse (playstyle = "off") [
      ; the opponents have the ball and im going to attack
      ifelse (table:get beliefs "oppo-has-ball") [
        set intention "attack-ball-owner"
      ][ ;else
        set intention "between-ball-and-goal"
      ]
    ][ ifelse (playstyle = "def") [
      ; the opponents have the ball and im going to defend
      set intention "between-ball-and-goal"
    ][ if (playstyle = "keep") [
      ; holy fuck there're coming for me
      set intention "between-ball-and-goal-near-goal"
    ]]]
  ]]]
end


; --- Execute actions ---
to execute-actions ;- player funct
  tell-beliefs
  ifelse (intention = "move-to-ball") [
    let ball-loc table:get beliefs "ball-loc"
    let bx item 0 ball-loc
    let by item 1 ball-loc
    facexy bx by
    fd 1
  ][ ifelse (intention = "try-score") [
    ; kick ball to goal of other team
    ifelse (team = 1) [
      let y (random ( 2 * goalsize-team2) - goalsize-team2)
      ask balls [
        kick-ball-xy 50 y [power] of myself
      ]
      lose-ball
    ][ ;else
      let y (random ( 2 * goalsize-team1) - goalsize-team1)
      ask balls [
        kick-ball-xy -50 y [power] of myself
      ]
      lose-ball
    ]
  ][ ifelse (intention = "move-forward-with-ball") [
    ; move in the direction of the goal of the opponent, with the ball
    ifelse (team = 1) [
      let y (random ( 2 * goalsize-team2) - goalsize-team2)
      facexy 50 y
    ][ if (team = 2) [
      let y (random ( 2 * goalsize-team1) - goalsize-team1)
      facexy -50 y
    ]]
    fd 1
  ][ ifelse (intention = "support-score") [
    ; attacker is near goal of opponent, ready to attack and we have the ball
    
    ; for now, randomly move in the area near the goal
    set heading random 360
    fd 1
  ][ ifelse (intention = "move-forward") [
    ; head toward the goal of the opponent without ball
    
    ; move in a random heading in direction towards the goal
    ifelse (team = 1) [
      ifelse (ycor > 0) [
        set heading random 90 + 90
      ][ ;else
        set heading random 90
      ]
      ifelse (xcor < 47) [
        fd 1
      ][ ;else
        fd -1
      ]
    ][ if (team = 2) [
      ifelse (ycor > 0) [
        set heading random 90 + 180
        fd 1
      ][ ;else
        set heading random 90 + 270
        fd 1
      ]
      ifelse (xcor < 47) [
        fd 1
      ][ ;else
        fd -1
      ]
    ]]
  ][ ifelse (intention = "pass-attacker") [
    ; pass the ball to a player who can attack
    let passed false
    ask players in-radius view-team2 [
      if (passed = false and table:get beliefs "playstyle" = "off") [
        ask balls [
          kick-ball-player myself [power] of myself
        ]
        lose-ball
      ]
    ]
  ][ ifelse (intention = "help-keeper") [
    ; our team has the ball, but stay back at our own half in case shit hits the fan
    
    ; we're already at our own half, so move around randomly
    ; unless we're near the border, then move towards the center
    ; this could be smarter, haha
    
    set heading random 360
    
    ifelse (ycor > 33) [
      set heading random 180 + 90
    ][ if (ycor < -33) [
      set heading random 180 - 90
    ]]
    fd 1
  ][ ifelse (intention = "to-own-half") [
    ; return towards our own half
    ifelse (team = 1) [
      let y (random ( 2 * goalsize-team1) - goalsize-team1)
      facexy -50 y
    ][ if (team = 2) [
      let y (random ( 2 * goalsize-team2) - goalsize-team2)
      facexy 50 y
    ]]
    fd 1
  ][ ifelse (intention = "stay-at-own-goal") [
    ; exactly what it says and what a keeper should do
    
    ; maybe try to stay around the middle?
    ifelse (team = 1) [
      let y (random goalsize-team1) - (goalsize-team1 / 2)
      facexy -50 y
    ][ if (team = 2) [
      let y (random goalsize-team2) - (goalsize-team2 / 2)
      facexy 50 y
    ]]
    fd 1
  ][ ifelse (intention = "move-to-own-goal") [
    ; move towards our own goal
    ifelse (team = 1) [
      facexy -50 0
    ][ if (team = 2) [
      facexy 50 0
    ]]
    fd 1
  ][ ifelse (intention = "attack-ball-owner") [
    ; move towards the opponent that has the ball, and try to take it away from him
    ; we know the ball location
    
    let ball-loc table:get beliefs "ball-loc"
    ; todo: distance???
    let bx item 0 ball-loc
    let by item 1 ball-loc
    ifelse (distancexy bx by < 2) [
      ; challenge the fucker to a duel
      if (random 100 < 50) [
        ask balls [
          set owner myself
        ]
      ]
    ][ ;else
      facexy bx by
      fd 1
    ]
  ][ ifelse (intention = "between-ball-and-goal") [
    ; position yourself between the ball and the goal
    let y 0
    let x 0
        let bx item 0 table:get beliefs "ball-loc"
    ifelse (team = 1) [
      set y (random goalsize-team1) - (goalsize-team1 / 2)
      set x (random (50 + bx) ) - 50
    ][ if (team = 1) [
      set y (random goalsize-team2) - (goalsize-team2 / 2)
      set x (random (50 - bx) ) + 50
    ]]
    facexy x y
    fd 1
  ][ if (intention = "between-ball-and-goal-near-goal") [
    ; position yourself where the keeper should be
    ifelse (team = 1) [
      let y (random goalsize-team1) - (goalsize-team1 / 2)
      facexy -50 y
    ][ if (team = 2) [
      let y (random goalsize-team2) - (goalsize-team2 / 2)
      facexy 50 y
    ]]
    fd 1
  ]]]]]]]]]]]]]
end


; --- Send messages ---
to send-messages ;- player funct
  let private private-team1
  let rad sound-team1
  if (team = 2) [
    set private private-team2
    set rad sound-team2
  ]

  ifelse (private) [
    foreach outgoing_messages [
      ifelse (item 1 table:get ? "to" = "mates") [
        ask players in-radius rad with [team = item 0 table:get ? "to"] [
          set incoming_messages lput ? incoming_messages
        ]
      ][ ;else
        ask players in-radius rad with [team = item 0 table:get ? "to" and who = item 1 table:get ? "to"] [
            set incoming_messages lput ? incoming_messages
        ]
      ]
    ]
  ][ ;else
    foreach outgoing_messages [
      ask players in-radius rad [
        set incoming_messages lput ? incoming_messages
      ]
    ]
  ]
  
  set outgoing_messages []
end

to tell-beliefs
  ; team positions
  foreach table:to-list table:get beliefs "team-loc" [
    let message table:make
    table:put message "from" list team who
    table:put message "to" list team "mates"
    table:put message "subject" "teampos"
    table:put message "message" ?
    set outgoing_messages lput message outgoing_messages
  ]
  ; opponent positions
  foreach table:to-list table:get beliefs "oppo-loc" [
    let message table:make
    table:put message "from" list team who
    table:put message "to" list team "mates"
    table:put message "subject" "oppopos"
    table:put message "message" ?
    set outgoing_messages lput message outgoing_messages
  ]
  ; ball position
    let message table:make
    table:put message "from" list team who
    table:put message "to" list team "mates"
    table:put message "subject" "ballpos"
    table:put message "message" table:get beliefs "ball-loc"
    set outgoing_messages lput message outgoing_messages
  ; own position
    set message table:make
    table:put message "from" list team who
    table:put message "to" list team "mates"
    table:put message "subject" "teampos"
    table:put message "message" list who (list xcor ycor)
    set outgoing_messages lput message outgoing_messages
   ; ball owner:
   ; set message table:make
   ; table:put message "from" list team who
   ; table:put message "to" list team "mates"
   ; table:put message "subject" "ballown"
   ; table:put message "message" list table:get beliefs "team-has-ball" table:get beliefs "oppo-has-ball"

end

;to shout-message [message] ; - player function
;  
;  let radius sound-team1
;  if team = 2 [ set radius sound-team2 ]
;  
;  ask players in-radius radius 
;  [
;    ifelse team = [team] of myself
;    [
;      ; same team
;      shout-to-player self message
;    ]
;    [
;      ; other team 
;      if ([team] of myself = 1 and not private-team1) or ([team] of myself = 2 and not private-team2)
;      [
;        shout-to-player self message
;      ]
;    ]
;  ]
;end
;
;to shout-own-team [message] ; player function
;  let msg table:make
;  table:put msg "to" "mates"
;  table:put msg "subject" "shout"
;  table:put msg "sendteam" team
;  table:put msg "message" message
;  set outgoing_messages lput msg outgoing_messages
;end
;
;to shout-other-team [message] ; player function
;  let msg table:make
;  table:put msg "to" "opponents"
;  table:put msg "subject" "shout"
;  ifelse team = 1
;  [
;    table:put msg "sendteam" 2
;  ]
;  [
;    table:put msg "sendteam" 1
;  ]
;  table:put msg "message" message
;  set outgoing_messages lput msg outgoing_messages
;end
;
;
;to shout-to-player [player message] ;- player function
;  let msg table:make
;  table:put msg "from" myself
;  table:put msg "subject" "shout"
;  table:put msg "message" message
;  set outgoing_messages lput msg outgoing_messages
;  ask player
;  [
;    set incoming_messages lput msg incoming_messages
;  ]
;end
;
